// ==UserScript==
// @name         Twibooru Paste Enhancements
// @description  Configurable paste appearance
// @version      1.0.0
// @author       Marker
// @license      WTFPL
// @namespace    https://github.com/marktaiwan/
// @homepageURL  https://github.com/marktaiwan/Twibooru-Paste-Enhancements
// @supportURL   https://github.com/marktaiwan/Twibooru-Paste-Enhancements/issues
// @match        https://*.twibooru.org/*
// @grant        none
// @inject-into  content
// @run-at       document-start
// @noframes
// @require      https://raw.githubusercontent.com/soufianesakhi/node-creation-observer-js/master/release/node-creation-observer-1.2.js
// ==/UserScript==

(function () {
'use strict';
const SCRIPT_NAME = 'Paste Enhancements';
const SCRIPT_ID = 'paste_enhancements';

const CSS = `/* Generated by ${SCRIPT_NAME} */
ol.paste-content {
  margin-top: 0;
}
.${SCRIPT_ID}--sticky {
  position: sticky;
  top: 0px;
}
.${SCRIPT_ID}--header-group {
  padding: 0px 4px;
}
.${SCRIPT_ID}--header-group:first-child {
  padding-inline-start: 0px;
}
.${SCRIPT_ID}--header-group:last-child {
  padding-inline-end: 0px;
}
.${SCRIPT_ID}--header-item {
  padding: 0px 4px;
  user-select: none;
}

/* centered layout */
#container.layout--center-aligned .${SCRIPT_ID}--header {
  margin: 0 auto;
  width: max-content;
}
`;

const pasteConfig = {
  paste_font_size: {
    defaultValue: '11',
  },
  paste_line_height: {
    defaultValue: '1.2'
  },
  paste_width: {
    defaultValue: '980',
  }
};

const create = (ele) => document.createElement(ele);
const getStore = () => JSON.parse(localStorage.getItem(`${SCRIPT_ID}--settings`)) || {};
const setStore = (store) => localStorage.setItem(`${SCRIPT_ID}--settings`, JSON.stringify(store));

const onReady = (() => {
  const callbacks = [];
  document.addEventListener('DOMContentLoaded', () => callbacks.forEach(fn => fn()), {once: true});
  return (fn) => {
    if (document.readyState == 'complete') {
      fn();
    } else {
      callbacks.push(fn);
    }
  };
})();

function setVal(key, val) {
  const store = getStore();
  store[key] = val;
  setStore(store);
}

function initCSS() {
  const styleId = `${SCRIPT_ID}-style`;
  if (!document.getElementById(styleId)) {
    const styleElement = document.createElement('style');
    styleElement.setAttribute('type', 'text/css');
    styleElement.id = styleId;
    styleElement.innerHTML = CSS;
    document.body.insertAdjacentElement('afterend', styleElement);
  }
}

function createGroup(nodeArray = []) {
  const group = create('div');
  group.classList.add(`${SCRIPT_ID}--header-group`);
  group.append(...nodeArray);
  return group;
}

function numericSettingGroup(content, key, stepping, styleUpdate) {
  const countDecimals = (val) => (val % 1 != 0)
    ? val.toLocaleString('en').split('.')[1].length || 0
    : 0;

  const incrementer = (attr, stepping) => {
    return () => {
      const decimals = countDecimals(stepping);
      const oldVal = Number(content.getAttribute(attr));
      const newVal = oldVal + stepping;
      content.setAttribute(attr, newVal.toFixed(decimals));
    };
  };

  const plusSign = createButton('', ['fa-plus'], incrementer(key, stepping));
  const minusSign = createButton('', ['fa-minus'], incrementer(key, stepping * -1));
  const display = create('span');

  display.classList.add(`${SCRIPT_ID}--header-item`);

  pasteConfig[key].changeHandler = (val) => styleUpdate(val, {minusSign, display, plusSign});

  return [minusSign, display, plusSign];
}

function createButton(text, fa, handler) {
  const button = create('a');
  let textContent = text || '';

  if (fa && fa.length > 0) {
    button.appendChild(createGlyph(...fa));
    if (text) textContent = ' ' + textContent;
  }

  button.appendChild(document.createTextNode(textContent));
  if (handler) button.addEventListener('click', handler);
  return button;
}

function createGlyph(...code) {
  const i = create('i');
  i.classList.add('fa', ...code);
  return i;
}

function initValues(content) {
  const store = getStore();
  const hasOwn = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key);
  for (const [key, {defaultValue}] of Object.entries(pasteConfig)) {
    if (!hasOwn(store, key)) store[key] = defaultValue;
    content.setAttribute(key, store[key]);
  }
  setStore(store);
}

function debounce(fn, delay) {
  let timeout = null;
  return (...args) => {
    window.clearTimeout(timeout);
    timeout = window.setTimeout(fn, delay, ...args);
  };
}

function setStickyState(header, content) {
  const viewportHeight = document.documentElement.clientHeight;
  const pasteHeight = content.clientHeight;
  header.classList.toggle(
    `${SCRIPT_ID}--sticky`,
    (pasteHeight > viewportHeight * 0.8)
  );
}

function initPaste(content) {
  const attributeObserver = new MutationObserver(mutationList => {
    mutationList.forEach(mutation => {
      const key = mutation.attributeName;
      const val = mutation.target.getAttribute(key);
      setVal(key, val);
      pasteConfig[key].changeHandler(val);
    });
  });
  attributeObserver.observe(content, {attributeFilter: Object.keys(pasteConfig)});

  initValues(content);
  initCSS();

  const header = create('div');
  header.classList.add(
    `${SCRIPT_ID}--header`,
    'block__header',
    'flex',
    'flex--wrap',
  );

  const fontSizeGroup = createGroup(
    numericSettingGroup(content, 'paste_font_size', 1,
      (val, {display}) => {
        display.innerHTML = '';
        display.append(document.createTextNode('ðŸ—š ' + val));
        content.style.fontSize = val + 'px';
      }
    )
  );

  const lineHeightGroup = createGroup(
    numericSettingGroup(content, 'paste_line_height', 0.1,
      (val, {display}) => {
        display.innerHTML = '';
        display.append(createGlyph('fa-arrows-alt-v'));
        display.append(createGlyph('fa-bars'));
        display.append(document.createTextNode(' ' + val));
        content.style.lineHeight = val;
      }
    )
  );

  const pasteWidthGroup = createGroup(
    numericSettingGroup(content, 'paste_width', 100,
      (val, {display}) => {
        const container = content.parentElement;
        container.style.width = '100%';
        container.style.maxWidth = val + 'px';
        display.innerText = 'Paste width';
        display.title = val + 'px';
      }
    )
  );

  const spacer = createGroup();
  spacer.classList.add('flex__grow');

  const scrollPositionGroup = createGroup([
    createButton('',['fa-chevron-up'], () => {
      const viewportHeight = document.documentElement.clientHeight;
      const pasteTop = content.parentElement.getBoundingClientRect().top;
      window.scrollBy(0, pasteTop - (viewportHeight / 2));
    }),
    createButton('', ['fa-chevron-down'], () => {
      const viewportHeight = document.documentElement.clientHeight;
      const pasteBottom = content.parentElement.getBoundingClientRect().bottom;
      window.scrollBy(0, pasteBottom - (viewportHeight / 2));
    }),
  ]);

  header.append(
    pasteWidthGroup,
    fontSizeGroup,
    lineHeightGroup,
    spacer,
    scrollPositionGroup,
  );

  content.before(header);
  setStickyState(header, content);
  onReady(() => {
    const throttledSticky = debounce(() => setStickyState(header, content), 500);
    throttledSticky();
    window.addEventListener('resize', throttledSticky);
  });
}

/* global NodeCreationObserver */
NodeCreationObserver.onCreation('.paste-content', initPaste, true);
})();
